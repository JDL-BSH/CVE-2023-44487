import csv
import socket
import httpx
import argparse
from h2.connection import H2Connection
from h2.config import H2Configuration
from urllib.parse import urlparse

def check_http2_support(url):
    """
    Check if the given URL supports HTTP/2.
    
    Parameters:
        url (str): The URL to check.
        
    Returns:
        tuple: (status, error/version)
        status: 1 if HTTP/2 is supported, 0 otherwise, -1 on error.
        error/version: Error message or HTTP version if not HTTP/2.
    """
    try:
        with httpx.Client(http2=True) as client:
            response = client.get(url)
        
        if response.http_version == 'HTTP/2':
            return (1, "")
        else:
            return (0, f"{response.http_version}")
            
    except Exception as e:
        return (-1, f"{e}")

def send_rst_stream_h2(host, port, stream_id):
    """
    Send an RST_STREAM frame to the given host and port.
    
    Parameters:
        host (str): The hostname.
        port (int): The port number.
        stream_id (int): The stream ID to reset.
        
    Returns:
        int: 1 if successful, -1 otherwise.
    """
    try:
        # Create a socket connection
        sock = socket.create_connection((host, port))
        config = H2Configuration(client_side=True)
        conn = H2Connection(config=config)
        
        # Initiate HTTP/2 connection
        conn.initiate_connection()
        sock.sendall(conn.data_to_send())
        
        # Send GET request headers
        headers = [(':method', 'GET'), (':authority', host), (':scheme', 'https'), (':path', '/')]
        conn.send_headers(stream_id, headers)
        sock.sendall(conn.data_to_send())
        
        # Listen for frames and send RST_STREAM when appropriate
        while True:
            data = sock.recv(65535)
            if not data:
                break

            events = conn.receive_data(data)
            for event in events:
                if event.stream_id == stream_id:
                    conn.reset_stream(event.stream_id)
                    sock.sendall(conn.data_to_send())
                    return 1

        sock.close()
    except Exception as e:
        print(f"Error: {e}")
        return -1

def extract_hostname_port(url):
    """
    Extract the hostname and port from a URL.
    
    Parameters:
        url (str): The URL to extract from.
        
    Returns:
        tuple: (hostname, port)
    """
    try:
        parsed_url = urlparse(url)
        hostname = parsed_url.hostname
        port = parsed_url.port
        scheme = parsed_url.scheme

        if not hostname:
            return -1, -1

        if port:
            return hostname, port

        if scheme == 'http':
            return hostname, 80

        if scheme == 'https':
            return hostname, 443

        return hostname, (80, 443)
    except Exception as e:
        return -1, -1

if __name__ == "__main__":
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description='Check HTTP/2 support and vulnerability to RST_STREAM frames.')
    parser.add_argument('-i', '--input', help='Path to input URLs file', required=True)
    parser.add_argument('-o', '--output', help='Path to output CSV file', required=True)
    args = parser.parse_args()

    # Open input and output files
    with open(args.input, 'r') as infile, open(args.output, 'w', newline='') as outfile:
        csv_writer = csv.writer(outfile)
        csv_writer.writerow(['URL', 'Vulnerability Status', 'Error/Downgrade Version'])
        
        # Loop through each URL in the input file
        for line in infile:
            addr = line.strip()
            print(f"Checking {addr}...")
            
            # Check HTTP/2 support
            http2support, err = check_http2_support(addr)
            
            # Extract hostname and port
            hostname, port = extract_hostname_port(addr)
            
            # Check vulnerability and write to CSV
            if http2support == 1:
                resp = send_rst_stream_h2(hostname, port, 1)
                if resp == 1:
                    csv_writer.writerow([addr, 'Vulnerable', ''])
                else:
                    csv_writer.writerow([addr, 'Not Vulnerable', 'Failed to send RST_STREAM'])
            else:
                if http2support == -1:
                    csv_writer.writerow([addr, 'Not Checked', err])
                else:
                    csv_writer.writerow([addr, 'Not Vulnerable', err])
